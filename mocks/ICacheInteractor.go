// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	cache "github.com/bxcodec/httpcache/cache"
	mock "github.com/stretchr/testify/mock"
)

// ICacheInteractor is an autogenerated mock type for the ICacheInteractor type
type ICacheInteractor struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *ICacheInteractor) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *ICacheInteractor) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *ICacheInteractor) Get(key string) (cache.CachedResponse, error) {
	ret := _m.Called(key)

	var r0 cache.CachedResponse
	if rf, ok := ret.Get(0).(func(string) cache.CachedResponse); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(cache.CachedResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Origin provides a mock function with given fields:
func (_m *ICacheInteractor) Origin() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *ICacheInteractor) Set(key string, value cache.CachedResponse) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, cache.CachedResponse) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
